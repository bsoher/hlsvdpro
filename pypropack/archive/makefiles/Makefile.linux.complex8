# Makefile for HLSVD
# Created by Brian J. Soher
# Copyright & license info for this Makefile (not HLSVD itself) is in the
# Vespa LICENSE file.

# BITS can be 32 or 64 and controls the bit mode of the binary.
BITS = 64
ARCH = -m$(BITS)
OPTIMIZE = -O
DISABLED_WARNINGS = -Wno-unused
WARNINGS = -Wall $(DISABLED_WARNINGS)
FFLAGS = $(OPTIMIZE) $(WARNINGS) $(ARCH) -g -fPIC
# When building LAPACK we force ffpe-trap to be blank (disabled) because
# LAPACK's make file says, "LAPACK is designed to check for and handle these
# cases internally and enabling these traps will likely cause LAPACK to crash."
# ref: https://icl.cs.utk.edu/svn/lapack-dev/lapack/trunk/CMAKE/CheckLAPACKCompilerFlags.cmake
LAPACK_FFLAGS =   -ffpe-trap=    $(FFLAGS)

GFOR3 := $(shell locate libgfortran.so.3.0.0)


# These steps will locate the first python installation in your PATH variable.
# I use conda and activate the python that I want before doing my compile, and
# conda ensures that the right path is first in my PATH.
PYDIR := $(shell python -c "from __future__ import print_function;import sys; print(sys.executable)")
PYDIR := $(subst bin/python,,$(PYDIR))
PYMIN := $(shell python -c "from __future__ import print_function;import sys; print(sys.version_info.minor)")
PYMAJ := $(shell python -c "from __future__ import print_function;import sys; print(sys.version_info.major)")
PYVER := $(PYMAJ).$(PYMIN)
PYVER2 := $(PYMAJ)$(PYMIN)

F2PY_IFLAGS = -I$(PYDIR)lib/python$(PYVER)/site-packages/numpy/core/include -I$(PYDIR)include/python$(PYVER) -I$(PYDIR)include/python$(PYVER)m
F2PY_CFLAGS = -pthread -B $(PYDIR)compiler_compat -Wl,--sysroot=/ -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC $(F2PY_IFLAGS)
F2PY_FFLAGS = -Wall -g -ffixed-form -fno-second-underscore -fPIC -O3 -funroll-loops $(F2PY_IFLAGS)


BIN_DIR = ./bin
DIST_TARGET_DIR = ../../hlsvdpro/
TARGET_LIB_NAME = $(BIN_DIR)/_cpropack.so


all: $(TARGET_LIB_NAME)


# Create the BIN_DIR if it doesn't exist
$(BIN_DIR): force
	@if (test ! -d $(BIN_DIR)) then \
        mkdir -p $(BIN_DIR); \
	fi

# Pattern rules for turning f2py_Util src files into object files
$(BIN_DIR)/%.o: f2py_Util/%.c
	gcc $(F2PY_CFLAGS) -c $< -o $@

$(BIN_DIR)/%.o: f2py_Util/%.f
	gcc $(F2PY_FFLAGS) -c $< -o $@

# Pattern rule for turning Lapack_Util/*.f into object files
$(BIN_DIR)/%.o: Lapack_Util/%.f
	gfortran $(LAPACK_FFLAGS) -c $< -o $@
    
# Pattern rule for turning HLSVD *.f into object files
$(BIN_DIR)/%.o: %.F
	gfortran $(FFLAGS) -c $< -o $@


# Variables to define lapack object files in the BIN_DIR
LAPACK_SRCS := $(wildcard Lapack_Util/*.f)
LAPACK_OBJS := $(addsuffix .o,$(basename $(notdir $(LAPACK_SRCS))))
LAPACK_OBJS := $(addprefix $(BIN_DIR)/,$(LAPACK_OBJS))

F2PY_SRCS := $(wildcard f2py_Util/*.f)
F2PY_OBJS := $(addsuffix .o,$(basename $(notdir $(F2PY_SRCS))))
F2PY_OBJS := $(addprefix $(BIN_DIR)/,$(F2PY_OBJS))

F2PYC_SRCS := $(wildcard f2py_Util/*.c)
F2PYC_OBJS := $(addsuffix .o,$(basename $(notdir $(F2PYC_SRCS))))
F2PYC_OBJS := $(addprefix $(BIN_DIR)/,$(F2PYC_OBJS))


# Rule for building lapack.a
$(BIN_DIR)/lapack.a: $(BIN_DIR) $(LAPACK_OBJS)
	ar -r $(BIN_DIR)/lapack.a $(LAPACK_OBJS)

lapack: $(BIN_DIR)/lapack.a

# SRCS lists the source (Fortran) files for the HLSVD code.
# OBJS are the compiled versions of these files that land in the BIN_DIR
SRCS := _cpropack-f2pywrappers.f _cpropackmodule.c fortranobject.c \
        caprod.F cblasext.F cgemm_ovwr.F cgetu0.F clanbpro.F \
		clansvd.F clansvd_aprod.F clansvd_irl.F clansvd_irl_aprod.F \
		cmgs.pentium.F creorth.F critzvec.F csafescal.F printstat.F \
		sblasext.F sbsvd.F second.F sgemm_ovwr.F

OBJS := $(addprefix $(BIN_DIR)/, $(addsuffix .o,$(basename $(SRCS))))


# This builds a target that statically links in GFortran's libraries so
# we don't have to require mingw32 gfortran be installed for this to work.
$(TARGET_LIB_NAME): $(BIN_DIR) $(OBJS) lapack 
	gfortran -shared                        \
			-fPIC                           \
			-Wall $(ARCH)                   \
			-Wl,-rpath,'$$ORIGIN'           \
			-o $(TARGET_LIB_NAME)           \
			$(OBJS)                         \
			$(BIN_DIR)/lapack.a				



## In Vespa we only use the library, not an executable. But the executable
## is useful for stepping through with gdb so I've used it occasionally.
## See hlsvdmain in hlsvdpro.f for details.
#exe: $(BIN_DIR) $(OBJS) lapack
#	gfortran -static-libgcc -static-libgfortran   	\
#	         -Wall $(ARCH)                      	\
#	         -o hlsvdpro.exe                        \
#	    	 -Wl,-Bdynamic                          \
#	    	 -L.                                    \
#	    	 -lfftw3-3                              \
#	    	 -Wl,-static                            \
#	    	 $(OBJS)                                \
#		 $(BIN_DIR)/lapack.a


# depcheck lists the runtime libraries that the target relies on.
depcheck: $(TARGET_LIB_NAME)
	ldd $(TARGET_LIB_NAME)


# See comment about libgfortran above for why we copy it into the
# distribution directory.
dist: 
	cp $(TARGET_LIB_NAME) $(DIST_TARGET_DIR)
	cp $(GFOR3) $(DIST_TARGET_DIR)libgfortran.so.3
	cp $(TARGET_LIB_NAME) $(DIST_TARGET_DIR)_linux_py$(PYVER2)
	cp $(GFOR3) $(DIST_TARGET_DIR)_linux_py$(PYVER2)/libgfortran.so.3

clean:
	rm -rf $(BIN_DIR)

force:

